PROJEKTNAMN: ValvX Projektplattform

Detta är inte en applikation utan ett fullständigt fullstackramverk med kodnamnet Stargate. Syftet är att skapa en stabil grundstruktur som innehåller frontend, backend, databas och utvecklingsmiljö utan att någon funktionalitet eller användargränssnitt implementeras ännu. Frontend ansvarar för användargränssnitt och interaktion (baserat på React och Joy UI). Backend ansvarar för API-logik, datamodeller och autentisering (byggt i Django med Django REST Framework). All kod ska struktureras enligt punktlistan nedan, inga instruktioner eller guider.

STRUKTUR:
- frontend/ (React med TypeScript och Vite)
- backend/ (Django med Django REST Framework)
- .env (miljövariabler)
- docker-compose.yml (för PostgreSQL och produktion)
- README.md

FRONTEND:
- React + Vite + TypeScript
- UI-bibliotek: Joy UI Dashboard-template (https://mui.com/joy-ui/getting-started/templates/dashboard/)
- Axios för API-anrop
- Funktioner och vyer:
  - Dashboard
  - Project Leader Dashboard
  - Tidsrapportering
  - Projektplanering: Kanban, Gantt, Ekonomi & Tid
  - Meddelanden
  - 3D Viewer: 3D Översikt, Design, Byggarbetsplats
  - Vault: Home, Comments, Review Package, Files (trädstruktur), Versionset, Meetings
- Miljövariabel: VITE_API_URL

BACKEND:
- Django
- Django REST Framework
- App: core
- Funktioner:
  - Tokenbaserad autentisering (JWT)
  - Tvåfaktorsautentisering
  - Rollbaserad åtkomst (projectleader, medlem, gäst)
  - API-prefix: /api/
  - Hälsokontroll: /api/status/ → { "status": "ok" }
  - CRUD-endpoints för: användare, projekt, uppgifter, filer, wiki, kommentarer, kalender, notifieringar, möten

DATABAS:
- SQLite för utveckling
- PostgreSQL via Docker för produktion
- Alla modeller ska fungera i båda
- Datamodeller:
  - User
  - Project
  - Task
  - File (med trädstruktur och versionering)
  - WikiArticle
  - Comment
  - RoleAccess
  - TimeReport
  - Notification
  - Meeting

APPAR:
APP: files
BESKRIVNING: hanterar uppladdning, struktur och nedladdning av filer med trädstruktur

APP: wiki
BESKRIVNING: tillåter användare att skapa och redigera wiki-artiklar kopplade till projekt

APP: notifications
BESKRIVNING: hanterar notifieringar och påminnelser för uppgifter och kommentarer

UTVECKLINGSFLÖDE:
- Git används för versionshantering
- Branchstruktur enligt Git Flow:
  - main
  - develop
  - feature/*
  - bugfix/*
  - release/*
  - hotfix/*

- Commit-taggar:
  - #feat:
  - #fix:
  - #docs:
  - #style:
  - #refactor:
  - #test:
  - #chore:

- Pull Requests:
  - Från feature/ till develop
  - Beskrivning krävs
  - Minst 1 granskare

KVALITET:
- Kodstandard dokumenteras i CONTRIBUTING.md
- Automatisk lintning och tester med GitHub Actions (valfritt)
- Strukturen ska vara CI/CD-redo

MÅL:
- Replit AI ska endast generera projektets ramverk och struktur
- Inga applikationer, komponenter eller vyer ska implementeras ännu
- Endast mappar, konfiguration, API-struktur och datamodeller ska sättas upp
- Replit AI ska strukturera kodbasen enligt punktlistan och vara redo för vidare utveckling
