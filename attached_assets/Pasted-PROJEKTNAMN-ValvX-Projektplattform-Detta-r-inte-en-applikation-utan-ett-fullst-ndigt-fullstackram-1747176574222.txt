PROJEKTNAMN: ValvX Projektplattform

Detta är inte en applikation utan ett fullständigt fullstackramverk med kodnamnet Stargate. Syftet är att skapa en stabil grundstruktur som innehåller frontend, backend, databas och utvecklingsmiljö utan att någon funktionalitet eller användargränssnitt implementeras ännu. Frontend ansvarar för användargränssnitt och interaktion (baserat på React och Joy UI). Backend ansvarar för API-logik, datamodeller och autentisering (byggt i Django med Django REST Framework). All kod ska struktureras enligt punktlistan nedan, inga instruktioner eller guider.

STRUKTUR:
- frontend/ (React med TypeScript och Vite)
- backend/ (Django med Django REST Framework)
- .env (miljövariabler)
- docker-compose.yml (för PostgreSQL och produktion)
- README.md

FRONTEND:
- React + Vite + TypeScript
- UI-bibliotek: Joy UI Dashboard-template (https://mui.com/joy-ui/getting-started/templates/dashboard/)
- Axios för API-anrop
- Funktioner och vyer:
  - Dashboard
  - Project Leader Dashboard
  - Tidsrapportering
  - Projektplanering: Kanban, Gantt, Ekonomi & Tid
  - Meddelanden
  - 3D Viewer: 3D Översikt, Design, Byggarbetsplats
  - Vault: Home, Comments, Review Package, Files (trädstruktur), Versionset, Meetings
- Miljövariabel: VITE_API_URL

BACKEND:
- Django
- Django REST Framework
- App: core
- Funktioner:
  - Tokenbaserad autentisering (JWT)
  - Tvåfaktorsautentisering
  - Rollbaserad åtkomst (projectleader, medlem, gäst)
  - API-prefix: /api/
  - Hälsokontroll: /api/status/ → { "status": "ok" }
  - CRUD-endpoints för: användare, projekt, uppgifter, filer, wiki, kommentarer, kalender, notifieringar, möten

DATABAS:
- SQLite för utveckling
- PostgreSQL via Docker för produktion
- Alla modeller ska fungera i båda
- Datamodeller:
  - User
  - Project
  - Task
  - File (med trädstruktur och versionering)
  - WikiArticle
  - Comment
  - RoleAccess
  - TimeReport
  - Notification
  - Meeting

APPAR:
APP: files
BESKRIVNING: hanterar uppladdning, struktur och nedladdning av filer med trädstruktur

APP: wiki
BESKRIVNING: tillåter användare att skapa och redigera wiki-artiklar kopplade till projekt

APP: notifications
BESKRIVNING: hanterar notifieringar och påminnelser för uppgifter och kommentarer

UTVECKLINGSFLÖDE:
- Git används för versionshantering
- Branchstruktur enligt Git Flow:
  - main
  - develop
  - feature/*
  - bugfix/*
  - release/*
  - hotfix/*

- Commit-taggar:
  - #feat:
  - #fix:
  - #docs:
  - #style:
  - #refactor:
  - #test:
  - #chore:

- Pull Requests:
  - Från feature/ till develop
  - Beskrivning krävs
  - Minst 1 granskare

KVALITET:
- Kodstandard dokumenteras i CONTRIBUTING.md
- Automatisk lintning och tester med GitHub Actions (valfritt)
- Strukturen ska vara CI/CD-redo

MÅL:
- Replit AI ska endast generera ramverket, inte en applikation
- Detta är en teknisk grundstruktur för ett fullstackprojekt, inte en färdig lösning
- Frontend är ett skal utan komponenter eller logik
- Backend är förberedd med appar och modeller men ingen affärslogik
- Varje app ska kunna frysas (låses) genom versionstaggar, t.ex. app-wiki-v1.0
- En app betraktas som fryst när:
  - Den är merge:ad in i develop eller main
  - Den har en Git-tagg som anger version (ex: app-files-v1.0)
  - Koden är försedd med "DO NOT MODIFY"-kommentarer där det är relevant
  - En versionsfil finns i appens mapp, exempel:

```python
# backend/wiki/__version__.py
__version__ = "1.0.0"
__locked__ = True
```

- Replit AI ska följa mappstruktur, API-schema och modellkopplingar men inte bygga UI eller endpoints ännu
- Syftet är att skapa en stabil och utbyggbar kodbas som andra kan fortsätta utveckla utan att röra redan frysta delar

FRYSTA APPAR:
- files v1.0 – markerad som stabil, versionstaggad och ej för vidare ändring
- wiki v1.0 – slutförd och låst med __locked__ = True

REPLIT AI DIREKTIV:
- Läs endast detta dokument och skapa exakt den struktur som definierats
- Generera endast mappar, datamodeller, konfigurationsfiler och API-ram
- Skapa inte UI-komponenter, affärslogik, vyer eller endpoints
- Ändra inte innehåll i appar som listas som frysta
- Respektera __version__.py med __locked__ = True
- Detta är ett ramverk, inte en applikation. Fokusera endast på struktur

UTVECKLINGSUPPDELNING (2 användare):

ANVÄNDARE 1:
- Branch: feature/frontend-core-ui
- Uppgifter:
  - Bygg Dashboard-sida i Joy UI enligt frontendlistan
  - Skapa komponenter för:
    - Anslagstavla (meddelandelogg kopplad till notifications)
    - Kalender (kopplad till möten)
  - Integrera med backend-API (autentisering, rollbaserad åtkomst)

ANVÄNDARE 2:
- Branch: feature/backend-core-api
- Uppgifter:
  - Bygga ViewSets för Project och Task
  - Lägg till serializers för dessa modeller
  - Skapa test-endpoint: /api/project-sample/ med dummy-data

MÅL:
- Två användare ska kunna arbeta i separata grenar samtidigt utan konflikter
- Båda ska committa med tagg #feat: och göra pull requests till develop
- Kod ska vara isolerad, testbar och följa ramverket
- Resultatet ska vara att både UI och API grundläggande funktioner kan valideras parallellt
